# Provides cluster specific configuration options.
cluster:
    id: 8bQgKGVyEq1PhI3dA9DDCoZP6ax0F0nX8b1Ly18telk= # Globally unique identifier for this cluster (base64 encoded random 32 bytes).
    secret: sA5gGxwiUWImvRWmi8H6oMvzGXXtLHW9eNtbk+Tm4i4= # Shared secret of cluster (base64 encoded random 32 bytes).
    # Provides control plane specific configuration options.
    controlPlane:
        endpoint: https://kubernetes.vm.local:6443/ # Endpoint is the canonical controlplane endpoint, which can be an IP address or a DNS hostname.
    clusterName: development # Configures the cluster's name.
    # Provides cluster specific network configuration options.
    network:
        dnsDomain: cluster.local # The domain used by Kubernetes DNS.
        # The pod subnet CIDR.
        podSubnets:
            - 10.244.0.0/16
        # The service subnet CIDR.
        serviceSubnets:
            - 10.96.0.0/12
        
        # # The CNI used.
        cni:
            name: custom # Name of CNI to use.
        #     # URLs containing manifests to apply for the CNI.
            urls:
                - https://raw.githubusercontent.com/geoffh1977/kubernetes-gitops-cluster/main/kubernetes/manifests/bases/calico/calico-vxlan.yaml
    token: e61g73.jfh6hyiqs5dwkl8f # The [bootstrap token](https://kubernetes.io/docs/reference/access-authn-authz/bootstrap-tokens/) used to join the cluster.
    aescbcEncryptionSecret: /q0RWlhxXhzaXGZiDmzZygdXjo6OKXsO5K+NSPGyCkg= # The key used for the [encryption of secret data at rest](https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/).
    # The base64 encoded root certificate authority used by Kubernetes.
    ca:
        crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJpVENDQVMrZ0F3SUJBZ0lRZllzL3d3Wkp5UkNWWUR2R1ZFS2FhREFLQmdncWhrak9QUVFEQWpBVk1STXcKRVFZRFZRUUtFd3ByZFdKbGNtNWxkR1Z6TUI0WERUSXlNRFV5TXpBeE1EUXdORm9YRFRNeU1EVXlNREF4TURRdwpORm93RlRFVE1CRUdBMVVFQ2hNS2EzVmlaWEp1WlhSbGN6QlpNQk1HQnlxR1NNNDlBZ0VHQ0NxR1NNNDlBd0VICkEwSUFCTDZTMlUxNHNzYU5MYkZ0V1ZUS2pSUno4QS84dS8rN0k4Tlo3aXNJaWE5VDNvWFhUQ0ZjRFREWUdvcnIKTzdKYUFoNC9OUUh6WmRsbzZJU3R0RXlucnRpallUQmZNQTRHQTFVZER3RUIvd1FFQXdJQ2hEQWRCZ05WSFNVRQpGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFCkZnUVVhelQzdkVya0k4eDB5b1IrZnplVi9xRyt1RGN3Q2dZSUtvWkl6ajBFQXdJRFNBQXdSUUloQU9VZFRCT1gKVmZydmV2QVZ6QUJjR1lSWTVRQ24vMlg4TVdHYjVvQUhHZE5EQWlCNmZvU1ZlR243dEFLZVpYdE1QM2xJUjFtSApvY3pMZDdIU0krVHEyWWtwRlE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
        key: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSUc4UldabUZlTkpWQk9pekdvcmovMjAwd2Q4RmRheFRQc0prVzJhQjhPQ0VvQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFdnBMWlRYaXl4bzB0c1cxWlZNcU5GSFB3RC95Ny83c2p3MW51S3dpSnIxUGVoZGRNSVZ3TgpNTmdhaXVzN3Nsb0NIajgxQWZObDJXam9oSzIwVEtldTJBPT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo=
    # The base64 encoded aggregator certificate authority used by Kubernetes for front-proxy certificate generation.
    aggregatorCA:
        crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJZRENDQVFXZ0F3SUJBZ0lRVWcrZHNZcnZuaUsyaENPSzc5RDdCekFLQmdncWhrak9QUVFEQWpBQU1CNFgKRFRJeU1EVXlNekF4TURRd05Gb1hEVE15TURVeU1EQXhNRFF3TkZvd0FEQlpNQk1HQnlxR1NNNDlBZ0VHQ0NxRwpTTTQ5QXdFSEEwSUFCRmtIbnlpNFg5SElTL3Jla3NQZ2dWdWg0dVN1Umw1bVFMQjI0dmZndHBQUnBDdHJKVzNyCmRnUXZrL0tNSDlkRnR2U0lzekVzdVFqdzY1Uks1dDNPamlhallUQmZNQTRHQTFVZER3RUIvd1FFQXdJQ2hEQWQKQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZApCZ05WSFE0RUZnUVU0aFlsbDFwWnc3amtBaDRPL0owV2pmd0Z1dzR3Q2dZSUtvWkl6ajBFQXdJRFNRQXdSZ0loCkFJSGVRYzU5VlVIOEJ1cUlNemlZajFlOUJUbWw4eDJQakhpM3lNTlpqRTE5QWlFQWpWZDd6MXE1UVZVUkRSMEsKWjdVR0d2VUNuYkpRRWlobXdXeStjNDc4Nm5vPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
        key: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSU5wQXR0VEt0Skdnbk5DZnpLUVNBTzFyRWtUNERDN0hLN0p4VVhJd25vMHpvQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFV1FlZktMaGYwY2hMK3Q2U3crQ0JXNkhpNUs1R1htWkFzSGJpOStDMms5R2tLMnNsYmV0MgpCQytUOG93ZjEwVzI5SWl6TVN5NUNQRHJsRXJtM2M2T0pnPT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo=
    # The base64 encoded private key for service account token generation.
    serviceAccount:
        key: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSU1WQ3RmTUVtU1FKcGRvcUd2SWxINXRkQ2h5MVFyb1U0K0F3VHZNZElKMG5vQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFcVdwUXRaOXd6YURiM0pHZVBDQWlPc3I0a3VSZVRVT05oNlBRdkU1K08weDIvZFkvc3dMYgpuai8ySjZpeVZCd3ZWQVo2RmlXM0xUcWNtVDVmczcwQmNBPT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo=
    # API server specific configuration options.
    apiServer:
        image: k8s.gcr.io/kube-apiserver:v1.23.5 # The container image used in the API server manifest.
        # Extra certificate subject alternative names for the API server's certificate.
        certSANs:
            - kubernetes.vm.local
        disablePodSecurityPolicy: true # Disable PodSecurityPolicy in the API server and default manifests.
        
        # # Configure the API server admission plugins.
        # admissionControl:
        #     - name: PodSecurity # Name is the name of the admission controller.
        #       # Configuration is an embedded configuration object to be used as the plugin's
        #       configuration:
        #         apiVersion: pod-security.admission.config.k8s.io/v1alpha1
        #         defaults:
        #             audit: restricted
        #             audit-version: latest
        #             enforce: baseline
        #             enforce-version: latest
        #             warn: restricted
        #             warn-version: latest
        #         exemptions:
        #             namespaces:
        #                 - kube-system
        #             runtimeClasses: []
        #             usernames: []
        #         kind: PodSecurityConfiguration
    # Controller manager server specific configuration options.
    controllerManager:
        image: k8s.gcr.io/kube-controller-manager:v1.23.5 # The container image used in the controller manager manifest.
    # Kube-proxy server-specific configuration options
    proxy:
        image: k8s.gcr.io/kube-proxy:v1.23.5 # The container image used in the kube-proxy manifest.
    # Scheduler server specific configuration options.
    scheduler:
        image: k8s.gcr.io/kube-scheduler:v1.23.5 # The container image used in the scheduler manifest.
    # Configures cluster member discovery.
    discovery:
        enabled: true # Enable the cluster membership discovery feature.
        # Configure registries used for cluster member discovery.
        registries:
            # Kubernetes registry uses Kubernetes API server to discover cluster members and stores additional information
            kubernetes: {}
            # Service registry is using an external service to push and pull information about cluster members.
            service: {}
            # # External service endpoint.
            # endpoint: https://discovery.talos.dev/
    # Etcd specific configuration options.
    etcd:
        # The `ca` is the root certificate authority of the PKI.
        ca:
            crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJmVENDQVNPZ0F3SUJBZ0lRWFFicE9laFZWSU1EVTNLYkE1YTYxVEFLQmdncWhrak9QUVFEQWpBUE1RMHcKQ3dZRFZRUUtFd1JsZEdOa01CNFhEVEl5TURVeU16QXhNRFF3TkZvWERUTXlNRFV5TURBeE1EUXdORm93RHpFTgpNQXNHQTFVRUNoTUVaWFJqWkRCWk1CTUdCeXFHU000OUFnRUdDQ3FHU000OUF3RUhBMElBQkFsUlljL0JieTFEClliUVYvK2NDcDV1S21scTFxWExrNEt5a2JGVWxYVDd3a3FEVjB6a3oxejRaRk1JYWo4QWV3YThwQzhsdFZ4S1oKOUE4bG5pWVhwU2VqWVRCZk1BNEdBMVVkRHdFQi93UUVBd0lDaERBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjRApBUVlJS3dZQkJRVUhBd0l3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVTzhNTTgxTlE5dlRLCkxSSCtyeFp3bHIwZGUrTXdDZ1lJS29aSXpqMEVBd0lEU0FBd1JRSWdGZENMaUxORjlEMnlFUlIxQ2lNdXZWU3gKd1c4RmRUOUtpMFg2cTAwKzEyVUNJUUNvV1hPWlhsZHlQekozTUdTMmRPWmFVYkh4YTFub3YyM3NrNFN5Z0JBYgpsQT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
            key: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSU9lc1dwZDBXSEFpUkxKTWdxamx2UGE4VlBqRUJVdTc3R2IxMUhWNHVTcXBvQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFQ1ZGaHo4RnZMVU5odEJYLzV3S25tNHFhV3JXcGN1VGdyS1JzVlNWZFB2Q1NvTlhUT1RQWApQaGtVd2hxUHdCN0JyeWtMeVcxWEVwbjBEeVdlSmhlbEp3PT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo=
        
        # # The container image used to create the etcd service.
        # image: gcr.io/etcd-development/etcd:v3.5.2

        # # The subnet from which the advertise URL should be.
        # subnet: 10.0.0.0/8
    # A list of urls that point to additional manifests.
    extraManifests: []
    #   - https://www.example.com/manifest1.yaml
    #   - https://www.example.com/manifest2.yaml

    # A list of inline Kubernetes manifests.
    inlineManifests: []
    #   - name: namespace-ci # Name of the manifest.
    #     contents: |- # Manifest contents as a string.
    #       apiVersion: v1
    #       kind: Namespace
    #       metadata:
    #       	name: ci

    
    # # Core DNS specific configuration options.
    # coreDNS:
    #     image: docker.io/coredns/coredns:1.9.1 # The `image` field is an override to the default coredns image.

    # # External cloud provider configuration.
    # externalCloudProvider:
    #     enabled: true # Enable external cloud provider.
    #     # A list of urls that point to additional manifests for an external cloud provider.
    #     manifests:
    #         - https://raw.githubusercontent.com/kubernetes/cloud-provider-aws/v1.20.0-alpha.0/manifests/rbac.yaml
    #         - https://raw.githubusercontent.com/kubernetes/cloud-provider-aws/v1.20.0-alpha.0/manifests/aws-cloud-controller-manager-daemonset.yaml

    # # A map of key value pairs that will be added while fetching the extraManifests.
    # extraManifestHeaders:
    #     Token: "1234567"
    #     X-ExtraInfo: info

    # # Settings for admin kubeconfig generation.
    # adminKubeconfig:
    #     certLifetime: 1h0m0s # Admin kubeconfig certificate lifetime (default is 1 year).
